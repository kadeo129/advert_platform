<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        return $this
            ->createQueryBuilder('a') // Création du QueryBuilder
            ->getQuery() // Récupération de la Query à partir du QueryBuilder
            ->getResult() // Récupération du Résultat à partir de la Query
            ;
    }

    public function myFindOne($id)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.id = :id')
            ->setParameter('id', $id)
        ;

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
            ->setParameter('author',$author)
            ->andWhere('a.date < :year')
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC')
        ;

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01')) // Date entre le 1er janvier de cette année
            ->setParameter('end', new \Datetime(date('Y').'-12-31'))// Et le 31 décembre de cette année
        ;
    }

    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        // On peut ajouter ce qu'on veut avant
        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'Paul-Henri')
        ;

        // On applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);

        // On peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getSingleResult()
        ;
    }

    public function myFindAllDQL($id)
    {
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a WHERE a.id = :id');
        $query->setParameter('id', $id);

        $result = $query->getResult();

        return $result;
    }

    public function getAdvertWithApplications()
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications','app')
            ->addSelect('app')
        ;

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->innerJoin('a.categories', 'cat')
            ->addSelect('cat')
        ;

        $qb->where($qb->expr()->in('cat.name',$categoryNames));

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    public function countPublishedTotal()
    {
        return $this->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image','i')
            ->addSelect('i')
            ->leftJoin('a.categories','c')
            ->addSelect('c')
            ->leftJoin('a.skills','s')
            ->addSelect('s')
            ->orderBy('a.date', 'DESC')
            ->getQuery()
        ;

        $query
            ->setFirstResult(abs(($page-1)*$nbPerPage))
            ->setMaxResults($nbPerPage)
        ;

        return new Paginator($query, true);
    }


    public function calculAge(\Datetime $registration_date)
    {
        $today= new \Datetime();
        $interval = $today->diff($registration_date);
        return $interval;
    }

    public function purge($days)
    {
        $listAdverts = $this->findByNbApplications(0);

        foreach($listAdverts as $advert)
        {
            $age = calculAge($advert->getDate());
            if($age->format('d') > $days)
            {
                $this->remove($advert);
                $this->flush;
            }
        }
        ;
    }
}
